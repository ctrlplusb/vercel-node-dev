#!/usr/bin/env node
'use strict';

/* eslint-disable @typescript-eslint/no-var-requires */

const meow = require('meow');
const execa = require('execa');
const path = require('path');
const fs = require('fs-extra');
const createTSConfig = require('./create-tsconfig');

const cli = meow(
  `
  Usage
    $ vercel-node-dev

  Options
    --debug-apis      -d           | Attach a Node.js inspect debugger instance to the APIs
    --debug-apis-port -o [number]  | Specify the debug port number for API debugger. Default=9229
    --dev-command     -c [string]  | Specify a custom develop command to execute for UI.
    --port            -p [number]  | Specify the port for vercel-node-dev server. Default=3000

  Examples
    $ vercel-node-dev --debug-apis
    $ vercel-node-dev -d
    $ vercel-node-dev --debug-apis --debug-apis-port 8989
    $ vercel-node-dev -d -o 8989
    $ vercel-node-dev -p 1337
    $ vercel-node-dev -c "react-app-rewired start"
`,
  {
    flags: {
      debugApis: {
        alias: 'd',
        default: false,
        isRequired: false,
        type: 'boolean',
      },
      debugApisPort: {
        alias: 'o',
        default: 9229,
        isRequired: false,
        type: 'number',
      },
      port: {
        alias: 'p',
        default: 3000,
        isRequired: false,
        type: 'number',
      },
    },
  },
);

(async () => {
  const targetOriginalPath = process.cwd();
  const targetName = path.basename(process.cwd());
  const targetTsConfigPath = path.resolve(
    __dirname,
    `../tsconfig.${targetName}.json`,
  );
  const targetSymlinkPath = path.resolve(__dirname, `../targets/${targetName}`);

  createTSConfig({
    targetTsConfigPath,
    targetOriginalPath,
    targetSymlinkPath,
  });

  await fs.ensureSymlink(targetOriginalPath, targetSymlinkPath);

  const childProcess = execa(
    'node',
    [
      '-r',
      'ts-node/register',
      '--preserve-symlinks',
      '--preserve-symlinks-main',
      path.resolve(__dirname, '../src'),
    ],
    {
      cwd: path.resolve(__dirname, '../'),
      env: {
        FORCE_COLOR: '1',
        VND_DEBUG_APIS: cli.flags.debugApis ? '1' : undefined,
        VND_DEBUG_APIS_PORT: cli.flags.debugApisPort,
        VND_PORT: cli.flags.port,
        VND_TARGET_ORIGINAL_PATH: targetOriginalPath,
        VND_TARGET_NAME: targetName,
        VND_TARGET_TS_CONFIG_PATH: targetTsConfigPath,
        VND_TARGET_SYM_LINK_PATH: targetSymlinkPath,

        // env vars for ts-node
        TS_NODE_PROJECT: targetTsConfigPath,
        TS_NODE_TRANSPILE_ONLY: 'true',
      },
      stdio: 'inherit',
    },
  );

  childProcess.catch((err) => {
    console.error(err);
  });

  const dispose = (signal) => {
    if (childProcess) {
      childProcess.kill(signal);
    }
  };
  process.on('SIGINT', dispose);
  process.on('SIGTERM', dispose);
})();
